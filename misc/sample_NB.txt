# Loading the necessary Libraries %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
from sklearnÄ® datasets import #datasetShouldBeHere



# Defining all the categories
categories = ['alt.atheism', 'comp.graphics', 'comp.os.ms- windows.misc',
'comp.sys.ibm.pc.hardware',
'comp.sys.mac.hardware', 'comp.windows.x', 'misc.forsale',
'rec.autos', 'rec.motorcycles', 'rec.sport.baseball', 'rec.sport.hockey', 'sci.crypt', 'sci.electronics', 'sci.med', 'sci.space', 'soc. religion. christian', 'talk.politics.guns', 'talk.politics.mideast', 'talk.politics.misc',
'talk.religion.misc']
# Training the data on these categories train #dataset
(subset= 'train', categories categories)
# Testing the data for these categories test #dataset
(subset= 'test', categories categories)




# Printing training data print(train.data[5])
# Importing necessary packages
from sklearn.feature_extraction.text import TfidfVectorizer from sklearn. naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
# Creating a model based on Multinomial Naive Bayes model = make_pipeline (TfidfVectorizer(), MultinomialNB())
# Training the model with the train data model.fit(train.data, train.target)
# Creating labels for the test data labels = model.predict(test.data)



# Importing necessary packages
from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
# Creating a model based on Multinomial Naive Bayes
model = make_pipeline (TfidfVectorizer(), MultinomialNB())
# Training the model with the train data
model.fit(train.data, train.target) # Creating Labels for the test data labels = model.predict(test.data)



# Creating confusion matrix and heat map from sklearn.metrics import confusion_matrix mat confusion_matrix(test.target, labels)
# Creating confusion matrix and heat map from sklearn.metrics import confusion_matrix mat confusion_matrix(test.target, labels)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, xticklabels=train.target_names,
yticklabels=train.target_names)
# Plotting Heatmap of Confusion Matrix
plt.xlabel('true label') plt.ylabel('predicted label');



